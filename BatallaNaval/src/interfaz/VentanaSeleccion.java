package interfaz;

import codigoNegocio.Estadisticas;
import codigoNegocio.IA;
import codigoNegocio.Jugador;
import codigoNegocio.Servidor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * VentanaSeleccion: Ventana encargada de dirigirnos a la Ventana Estadísticas o
 *                   al Tablero de juego.
 * 
 * @author Alberto Fernández Hernández
 * @author Francisco Cano Díaz
 */
public class VentanaSeleccion extends javax.swing.JFrame {

    // Proxy encargado de la comunicación entre el cliente y el Servidor.
    Servidor proxy;
    // Jugador logueado en el sistema.
    Jugador jugador;
    // Tablero de juego en el que se desarrolla la Partida.
    Tablero tablero;
    
    /**
     * Constructor.
     * 
     * @param proxy Proxy encargado de la comunicación entre el cliente y el Servidor.
     * @param jugador Jugador logueado en el sistema.
     */
    public VentanaSeleccion(Servidor proxy, Jugador jugador) {
        this.proxy = proxy;
        this.jugador = jugador;
        // Iniciamos la ventana, establecemos sus dimensiones y la centramos.
        initComponents();
        this.setSize(470, 330);
        centrarVentana(this);
    }
    
    /**
     * Método encargado de centrar la ventana en función de la resolución de
     * pantalla actual.
     * 
     * @param frame Ventana actual.
     */
    public void centrarVentana(Window frame) {
        // Obtenemos la dimensión de la pantalla.
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        // Obtenemos las dimensiones para centrar la ventana.
        int anchura = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int altura = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        // Establecemos las dimensiones.
        frame.setLocation(anchura, altura);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        estadisticasButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jugarButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BATTLEVA: SELECCIÓN MODO");
        setMaximumSize(new java.awt.Dimension(470, 330));
        setMinimumSize(new java.awt.Dimension(470, 330));
        setPreferredSize(new java.awt.Dimension(470, 330));
        setResizable(false);
        getContentPane().setLayout(null);

        estadisticasButton.setText("CONSULTAR ESTADISTICAS");
        estadisticasButton.setFocusable(false);
        estadisticasButton.setMaximumSize(new java.awt.Dimension(200, 23));
        estadisticasButton.setMinimumSize(new java.awt.Dimension(200, 23));
        estadisticasButton.setPreferredSize(new java.awt.Dimension(200, 23));
        estadisticasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasButtonActionPerformed(evt);
            }
        });
        getContentPane().add(estadisticasButton);
        estadisticasButton.setBounds(135, 120, 200, 23);

        jLabel2.setFont(new java.awt.Font("Copperplate", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SELECCIONE UNA OPCION");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(78, 70, 313, 32);

        jugarButton.setText("JUGAR");
        jugarButton.setFocusable(false);
        jugarButton.setMaximumSize(new java.awt.Dimension(200, 23));
        jugarButton.setMinimumSize(new java.awt.Dimension(200, 23));
        jugarButton.setPreferredSize(new java.awt.Dimension(200, 23));
        jugarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugarButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jugarButton);
        jugarButton.setBounds(135, 160, 200, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/imagenes/portada.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(470, 330));
        jLabel1.setMinimumSize(new java.awt.Dimension(470, 330));
        jLabel1.setPreferredSize(new java.awt.Dimension(470, 330));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 470, 330);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método encargado de cerrar la ventana actual e iniciar la Ventana de 
     * Estadísticas al pulsar el botón Consultar Estadísticas.
     * 
     * @param evt Evento del botón Consultar Estadísticas.
     */
    private void estadisticasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasButtonActionPerformed
        VentanaEstadisticas ventanaEstadisticas = new VentanaEstadisticas(proxy, jugador, this);
        this.dispose();
        ventanaEstadisticas.setVisible(true);
    }//GEN-LAST:event_estadisticasButtonActionPerformed

    /**
     * Método encargado de cerrar la ventana actual e iniciar la Ventana del
     * Tablero creando todos los objetos necesarios para poder empezar a jugar.
     * 
     * @param evt Evento del botón Jugar.
     */
    private void jugarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jugarButtonActionPerformed
        // Creamos las estadísticas y la IA a la que se va a enfrentar el Jugador.
        Estadisticas estadisticas = new Estadisticas();
        IA ia = new IA("IA", "IA", 0, "ia", "ia", jugador.getMediador(), estadisticas);
        // Obtenemos el Tablero, inicializando con los objetos correctos.
        tablero = Tablero.getInstanciaTablero(jugador, ia, jugador.getMediador(), this, proxy);
        // Cerramos la ventana actual...
        this.dispose();
        // E iniciamos el Tablero.
        tablero.setVisible(true);
        
        // Una vez salgamos del Tablero, la instancia del mismo será reseteada
        // para evitar posibles problemas al cargar partidas.
        Thread t = new Thread() {
            @Override
            public void run() {
                    while (tablero.isVisible()) { // Mientras juega el Jugador.
                        try {
                            Thread.sleep(100); // Esperamos
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Tablero.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    // Borramos la instancia de Tablero al salir de la Ventana
                    // del Tablero.
                    tablero.setInstanciaTablero();
                }
            };
            t.start();
    }//GEN-LAST:event_jugarButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton estadisticasButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jugarButton;
    // End of variables declaration//GEN-END:variables
}